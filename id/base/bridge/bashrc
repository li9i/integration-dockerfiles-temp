# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
    . /etc/bash_completion
fi

source /etc/bash_completion.d/git-prompt

Green="\[\033[0;32m\]"        # Green
IRed="\[\033[0;91m\]"         # Red
BIYellow="\[\033[1;93m\]"     # Yellow
Yellow="\[\033[0;33m\]"       # Yellow
BPurple="\[\033[1;35m\]"      # Purple

export GIT_PS1_SHOWDIRTYSTATE=1
PS1="\n\$(if [[ \$? == 0 ]]; then echo \"\[\033[0;94m\]\"; else echo \"\[\033[0;31m\]\"; fi)\342\226\210\342\226\210 (\t | \D{%d-%m-%y}) [\u/\h | \w ]"
PS1=$PS1'$(git branch &>/dev/null;\
if [ $? -eq 0 ]; then \
	echo "$(echo `git status` | grep "# Your branch is"> /dev/null 2>&1; \
	if [ "$?" -eq "0" ]; then \
		echo "$(echo `git status` | grep "# Untracked files" > /dev/null 2>&1; \
		if [ "$?" -eq "0" ]; then \
			# @4 - Clean repository - Untracked Files
			echo "'$BPurple'"$(__git_ps1 "(%s)**"); \
		else \
			echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
			if [ "$?" -eq "0" ]; then \
				# @4 - Clean repository - nothing to commit
				echo "'$Green'"$(__git_ps1 "(%s)**"); \
			else \
				# @5 - Changes to working tree
				echo "'$IRed'"$(__git_ps1 "(%s)**"); \
			fi)  "; \
		fi)"; \
	else \
		echo "$(echo `git status` | grep "# Untracked files" > /dev/null 2>&1; \
		if [ "$?" -eq "0" ]; then \
			# @4 - Clean repository - Untracked Files
			echo "'$BPurple'"$(__git_ps1 "(%s)"); \
		else \
			echo "$(echo `git status` | grep "nothing to commit" > /dev/null 2>&1; \
			if [ "$?" -eq "0" ]; then \
				# @4 - Clean repository - nothing to commit
				echo "'$Green'"$(__git_ps1 "(%s)"); \
			else \
				# @5 - Changes to working tree
				echo "'$IRed'"$(__git_ps1 "(%s)"); \
			fi)  "; \
		fi)"; \
	fi)" ;\
#~ fi \
#~ else \
	#~ # @2 - Prompt when not in GIT repo
	#~ echo " '$Yellow$PathShort$Color_Off' "; \
fi)';
#PS1=$PS1"\n\[\033[0m\]\342\226\210\342\226\210 "
PS1=$PS1"\n\[\033[0m\]"

alias git-tree='git log --graph --pretty=oneline --all --abbrev-commit'

export EDITOR='gvim -f'
set -o vi

alias gvim='UBUNTU_MENUPROXY= gvim'
alias g='gvim'
alias QQ='exit'


# ls after cd
cd() { builtin cd "$@" && ls; }

echo "----------------------------"
date
echo "----------------------------"

# creates common bash history among multiple termninals
# Avoid duplicates
HISTCONTROL=ignoredups:erasedups
export HISTSIZE=100000                   # big big history
export HISTFILESIZE=100000               # big big history

# When the shell exits, append to the history file instead of overwriting it
shopt -s histappend

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# Autocomplete stuff
bind 'set show-all-if-ambiguous on'
bind '"\e[Z":menu-complete-backward'
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'
bind 'TAB:menu-complete'

# https://superuser.com/a/1504199/1236116
bind 'set menu-complete-display-prefix on'
bind 'set colored-completion-prefix on'
bind 'set colored-stats on'
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::



# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# ROS-specific :::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
export CC=gcc
export CXX=g++

# Communication
export ROS_LOCALHOST_ONLY=0

# ROS + my overlays
source /opt/ros/humble/setup.bash
test -f   $HOME/ros1_ws/install/local_setup.bash &&
  source  $HOME/ros1_ws/install/local_setup.bash
test -f   $HOME/ros2_ws/install/local_setup.bash &&
  source $HOME/ros2_ws/install/local_setup.bash
test -f  $HOME/ros1_humble_bridge_ws/install/local_setup.bash &&
  source $HOME/ros1_humble_bridge_ws/install/local_setup.bash


# DDS choice (https://github.com/sea-bass/turtlebot3_behavior_demos#local-setup)
export RMW_IMPLEMENTATION=rmw_cyclonedds_cpp

# colcon_cd mimics roscd
source /usr/share/colcon_cd/function/colcon_cd.sh
export _colcon_cd_root=/opt/ros/humble/
alias roscd='colcon_cd'

# colcon command completion
source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash

# give color to rclcpp_{warn, error}
export RCUTILS_COLORIZED_OUTPUT=1

# if your ROS2 command does not auto-complete, put the following two lines into your .bashrc
eval "$(register-python-argcomplete3 ros2)"
eval "$(register-python-argcomplete3 colcon)"

# By default, ROS 2 logger doesn't output detailed information such as file name, function name, or line number. To customize it, write the following in your .bashrc:
# export RCUTILS_CONSOLE_OUTPUT_FORMAT="[{severity} {time}] [{name}]: {message} ({function_name}() at {file_name}:{line_number})"

# ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
# TBD later
#export ROS_DOMAIN_ID=127
#export CYCLONEDDS_URI=file://$HOME/cyclonedds.conf.xml
