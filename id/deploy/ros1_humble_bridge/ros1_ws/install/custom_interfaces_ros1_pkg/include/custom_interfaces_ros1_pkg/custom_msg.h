// Generated by gencpp from file custom_interfaces_ros1_pkg/custom_msg.msg
// DO NOT EDIT!


#ifndef CUSTOM_INTERFACES_ROS1_PKG_MESSAGE_CUSTOM_MSG_H
#define CUSTOM_INTERFACES_ROS1_PKG_MESSAGE_CUSTOM_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/PoseWithCovarianceStamped.h>

namespace custom_interfaces_ros1_pkg
{
template <class ContainerAllocator>
struct custom_msg_
{
  typedef custom_msg_<ContainerAllocator> Type;

  custom_msg_()
    : header()
    , child_frame_id()
    , custom_bool(false)
    , custom_int(0)
    , custom_double(0.0)
    , pose()  {
    }
  custom_msg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , custom_bool(false)
    , custom_int(0)
    , custom_double(0.0)
    , pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef uint8_t _custom_bool_type;
  _custom_bool_type custom_bool;

   typedef int8_t _custom_int_type;
  _custom_int_type custom_int;

   typedef double _custom_double_type;
  _custom_double_type custom_double;

   typedef  ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator>  _pose_type;
  _pose_type pose;





  typedef boost::shared_ptr< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> const> ConstPtr;

}; // struct custom_msg_

typedef ::custom_interfaces_ros1_pkg::custom_msg_<std::allocator<void> > custom_msg;

typedef boost::shared_ptr< ::custom_interfaces_ros1_pkg::custom_msg > custom_msgPtr;
typedef boost::shared_ptr< ::custom_interfaces_ros1_pkg::custom_msg const> custom_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator1> & lhs, const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_frame_id == rhs.child_frame_id &&
    lhs.custom_bool == rhs.custom_bool &&
    lhs.custom_int == rhs.custom_int &&
    lhs.custom_double == rhs.custom_double &&
    lhs.pose == rhs.pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator1> & lhs, const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_interfaces_ros1_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b7495536a7da3b15db70b8303e04a2a6";
  }

  static const char* value(const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb7495536a7da3b15ULL;
  static const uint64_t static_value2 = 0xdb70b8303e04a2a6ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_interfaces_ros1_pkg/custom_msg";
  }

  static const char* value(const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"string child_frame_id\n"
"bool custom_bool\n"
"int8 custom_int\n"
"float64 custom_double\n"
"geometry_msgs/PoseWithCovarianceStamped pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovarianceStamped\n"
"# This expresses an estimated pose with a reference coordinate frame and timestamp\n"
"\n"
"Header header\n"
"PoseWithCovariance pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseWithCovariance\n"
"# This represents a pose in free space with uncertainty.\n"
"\n"
"Pose pose\n"
"\n"
"# Row-major representation of the 6x6 covariance matrix\n"
"# The orientation parameters use a fixed-axis representation.\n"
"# In order, the parameters are:\n"
"# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)\n"
"float64[36] covariance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.custom_bool);
      stream.next(m.custom_int);
      stream.next(m.custom_double);
      stream.next(m.pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct custom_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_interfaces_ros1_pkg::custom_msg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "custom_bool: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.custom_bool);
    s << indent << "custom_int: ";
    Printer<int8_t>::stream(s, indent + "  ", v.custom_int);
    s << indent << "custom_double: ";
    Printer<double>::stream(s, indent + "  ", v.custom_double);
    s << indent << "pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::PoseWithCovarianceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_INTERFACES_ROS1_PKG_MESSAGE_CUSTOM_MSG_H
